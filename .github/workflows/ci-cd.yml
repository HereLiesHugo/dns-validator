name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov flake8

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 dns_validator --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 dns_validator --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test modular imports
      run: |
        python -c "from dns_validator import DNSValidator, utils, analytics, bulk; print('✅ All imports successful')"
        python -c "from dns_validator.dns_validator import cli; print('✅ CLI import successful')"
        python -c "from dns_validator.analytics import DNSQueryAnalytics; print('✅ Analytics import successful')"
        python -c "from dns_validator.bulk import BulkDomainProcessor; print('✅ Bulk processor import successful')"

    - name: Test CLI entry points
      run: |
        dns-validator --help
        python dns_validator_cli.py --help
        python -m dns_validator --help

    - name: Run basic functionality tests
      run: |
        python -c "
        from dns_validator.dns_validator import DNSValidator
        v = DNSValidator()
        result = v.check_delegation('google.com')
        assert result['delegation_valid'], 'Delegation check failed'
        print('✅ Basic DNS validation working')
        "

    - name: Test modular architecture
      run: |
        python -c "
        from dns_validator.utils import is_valid_domain, clean_domain_list
        from dns_validator.analytics import DNSQueryAnalytics, DNSAnalyticsReporter
        from dns_validator.bulk import BulkDomainProcessor
        
        # Test utils
        assert is_valid_domain('example.com'), 'Utils validation failed'
        domains = clean_domain_list(['example.com', '', 'test.org'])
        assert len(domains) == 2, 'Utils clean function failed'
        
        # Test analytics classes instantiation
        analytics = DNSQueryAnalytics(None)
        reporter = DNSAnalyticsReporter()
        
        # Test bulk processor instantiation
        bulk = BulkDomainProcessor(None)
        
        print('✅ Modular architecture tests passed')
        "

    - name: Run unit tests with pytest
      run: |
        pytest tests/ -v --tb=short

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      id-token: write

    environment:
      name: pypi

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/